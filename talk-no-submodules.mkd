name: inverse
layout: true
class: center, middle, inverse
---
#Managing submodules without git

.author[Roberto Di Remigio]

.date[11 February 2016, Skibotn]

.footnote[Slides available on [GitHub](https://github.com/robertodr/talk-no-submodules), [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/) licensed]
---
layout: false
.left-column[
  ## Modular programming
]
.right-column[
  Divide-and-conquer for programming.red[*]:

- Keep independent tasks uncoupled

- Components can be tested autonomously

- Provide standard interfaces across hosts

.footnote[.red[*] D. L. Parnas, [_Commun. ACM_, 1968, __11__, 341](http://dl.acm.org/citation.cfm?id=361623)]

  How?

- Divide codebase into small components

- Components __have to be__ (mostly) agnostic of each other

- __No assumptions__ about the host should be made

- Test on the largest number of platforms possible

- [Semantic versioning](http://semver.org/)

]

???

- Keep independent tasks uncoupled

- Components can be tested autonomously

- Provide standard interfaces across hosts
  * Standard interfaces: think of BLAS and LAPACK

  How?

- Components __have to be__ (mostly) agnostic of each other
   * Loose coupling between components is essential!

- __No assumptions__ about the host should be made
   * Loose coupling of the host and the guest is even more essential.
   * Think of language interoperability from the start!
   * This means that you should use C, at least at the interface level.

---
layout: false
.left-column[
  ## Testing
]
.right-column[
<img src="images/why_you_need_testing.jpg" align="middle">
<p style="clear: both;">

  No task is too small for testing!
]

???

No task is too small to go untested!

---
layout: false
.left-column[
  ## Strategies.red[*]
.footnote[.red[*] Guess which one I am going to suggest.]
]
.right-column[
- Use the submodules mechanism provided by git
  * DALTON
  * LSDALTON
  * DIRAC

- Keep a static copy in the host code repository
  * ReSpect

- Distribute as library
  * Psi4
]

???

- Keep a static copy in the host code repository
- The second strategy is similar to the first one, but avoids the use of submodules.
- Still we keep track of changes of code that is essentially third-party.
-  Might be a good alternative it that third-party code is rock solid.
-  XCFUN is an example.
- I want to be as ignorant of the guest internals as I am ignorant of BLAS/LAPACK internals
- And by internals I mean also the quirks and tweaks of getting it to compile!
- Guess which solution I am going to suggest?

--

Enforce __conceptual separation__ by __physical segregation__

- Keep host and guest code as far as possible

- Guest code minimally visible to host developers

<font color="red">
<center><b>Ignorance is bliss</b></center>
</font>

---
layout: false
.left-column[
  ## Using git
]
.right-column[
* Keep a reference to a commit in the submodule repo
 ```
 [submodule "external/pcmsolver"]
 	path = external/pcmsolver
 	url = https://github.com/PCMSolver/pcmsolver.git
 ```

* Clone recursively to get all sources
  ```
  git clone --recursive git@gitlab.com:dalton/lsdalton.git
  ```

* Compile everything together
  - We use CMake
      * Need `ON/OFF` toggles...
      * ...and to tweak submodule dependencies
  - Doable with autotools, but painful

* Switch host branches
  ```
  git branch my_branch
  git submodule sync
  git submodule update --init --recursive
  ```
]

???

Clone recursively: this repo, its submodules, their submodules...
```
git clone --recursive git@gitlab.com:dalton/lsdalton.git
```

Different branches might point to different submodules remotes
```
git submodule sync
```

Different branches might point to different commits
```
git submodule update --init --recursive
 ```

---
layout: false
class: split-50
## Using git

.column[
<font color="red">
<center>Pros</center>
</font>
* Simple workflow for interface prototyping

* Transparent for end users

* Uniform compilation
]
.column[
<font color="red">
<center>Cons</center>
</font>
* Every developer has to be aware of submodules

* Transfer of dependencies

* Submodule testing?
]

???

- Transfer of dependencies
- Quirky compilation workarounds
- Switching branches requires now three (!) commands, even if you don't use the submodules code
  * Wait for the example!
- Most likely (and usually) failures happen when the release is imminent

--

### Usual responses

* _Deactivating submodule XYZ on my workstation until a fix is committed!_

* _F\*@#!!! It was working yesterday!_ &#9760; _F\*@#_ &#9760;.red[*]

* _At the end of the day, modularity is not that great..._

.footnote[.red[*]Emphasis mine]

---
## Using git
<img src="images/contented.jpg" style="float: left; width: 45%; margin-right: 1%; margin-bottom: 0.5em;">
<img src="images/love_you_too.jpg" style="float: left; width: 50%; margin-right: 1%; margin-bottom: 0.5em;">
<p style="clear: both;">

* It tangles host and guest code build up

* You still need to care, even if you would like not to

* Deactivating == not testing == failures down the road

* Semantic versioning __never__ enforced

???

- It has worked up to now
- But has led to lots of frustration!
- Why am I not happy with it?
- I am a sinner! I've propagated this model too
  * It was to adopt this that we re-wrote Psi4 CMake infrastructure

---
layout: false
## Real world<sup>TM</sup> examples

### Cloning and branch switching

<div class="imageWrapper">
  <img class="overlayImage" src="images/clone_error.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/clone_error-lab.png" style="width: 80%" align="middle">
</div>
<p style="clear: both;">

---
layout: false
## Real world<sup>TM</sup> examples

### Accidental submodule reference updates

<div class="imageWrapper">
  <img class="overlayImage" src="images/compile_error1.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/compile_error2.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/compile_error3.png" style="width: 80%" align="middle">
</div>
<p style="clear: both;">

---
layout: false
## Real world<sup>TM</sup> examples

### Faulty host/guest updates

<div class="imageWrapper">
  <img class="overlayImage" src="images/link_error1.png" style="width: 80%" align="middle">

???

- The guest developer forgets to update the reference to the submodule
  with the commit to the host code repository

--
  <img class="overlayImage" src="images/link_error2.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error3.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error4.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error5.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error6.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error7.png" style="width: 80%" align="middle">
</div>
<p style="clear: both;">

---
layout: false
.left-column[
  ## Distribute library.red[*]
.footnote[.red[*] Pilfered from dr. Lori A. Burns, with permission!]
]
.right-column[
* Host repo contains interface to module.

* Link against a library.

* Host bundles and distributes in executable.

### Wait, what? Who's compiling the submodule?

Host allows only three routes for add-ons:

1. detecting pre-built _dynamic_ add-on library and headers.
  Requires writing a `FindAddon.cmake` module.

2. build _dynamic_ add-on library on-demand.
  Requires writing a `ConfigAddon.cmake` module with an extensive `ExternalProject_Add` command.

3. build _static_ add-on library on-demand.
  Same as above, but final executable might not be redistributable.
<font color="red">
<center><b>Confusing?</b></center>
</font>
]

???

- Linking is something we're already very good at doing,
  either with CMake or autotools.

### Wait, what? Who's compiling the submodule?

- I don't know (and I don't care about) autotools so we'll assume
  CMake throughout.
- `FindAddon.cmake` is fairly easy to write. There are many examples among the
  standard CMake modules.
- `ConfigAddon.cmake` is needed to prototype all the CMake variable exchanges
  that the parent and external project are going to have to make.
  * We are already doing this step and we've become fairly good at it
- First an example, then we discuss pros and cons.

---
layout: false
## Real world<sup>TM</sup> example

CMake snippets available from the [Psi4](https://github.com/psi4/psi4public) public repository

```cmake
if(ENABLE_PCMSOLVER)
  include(ConfigPCMSolver)
endif()
```
```cmake
# User signal to try pre-built PCMSolver
if(PCMSOLVER_ROOT)
  find_package(PCMSolver)
endif()
# Build PCMSolver as external package if pre-built failed or not signaled
if(NOT PCMSolver_FOUND)
  # Configuration of on-demand build
  ExternalProject_Add(interface_pcmsolver
    PREFIX ${CUSTOM_PCMSolver_LOCATION}
    GIT_REPOSITORY https://github.com/PCMSolver/pcmsolver
    GIT_TAG master
    CMAKE_ARGS "${PCMSolverCMakeArgs}"
    INSTALL_DIR "${CUSTOM_PCMSolver_LOCATION}/install"
    )
  # Post-build operations
endif()
```
???

- All of these files are publicly available on the Psi4 repo
- The top-most `CMakeLists.txt` contains just a switch.
  If the add-on is enabled try to configure it.
- The `ConfigPCMSolver.cmake` file contains some logic to reroute for
  option 1 (detect and use prebuilt add-on) or options 2 and 3.
- For a package that is provided by the Linux distribution in use
  we would do exactly the same!
- Options 2 and 3 are the very last resort, unless the developer
  wants to run a "super-build". The code is downloaded at build
  time into the build directory.
- So yeah, we have the code somewhere but it's not in the source
  tree of the host!

---
layout: false
class: split-50
## Distribute library

.column[
<font color="red">
<center>Pros</center>
</font>
* Transparent for developers

* Uniform compilation

* No worries about the source
]
.column[
<font color="red">
<center>Cons</center>
</font>
* Awkward for interface prototyping

* Transfer of dependencies

* End-users?
]

???

* Transparent for developers
  - Install once...
  - ...or compile on-demand...
  - ...and forget about it

* Awkward for interface prototyping
  - Submodule code lives somewhere else
  - Really, nothing that can't be managed by a script
  - On your branch you can still use submodules.
  - But they should not go to `master`!

* I think it strikes the best usability/modularity balance
  - We are still actively promoting modularity
  - But we are not "harassing" all developers into a different workflow
  - Interface prototyping/testing is something a smaller group of developers does,
    not the whole team!

--

### Possible responses

* _Deactivating submodule XYZ on my workstation until a fix is committed!_

* _F\*@#!!! It was working yesterday!_ &#9760; _F\*@#_ &#9760;.red[*]

* _At the end of the day, modularity is not that great..._

.footnote[.red[*]Emphasis mine]

---
## What's the end game? Distribute executables!

* Most users are not able to build anyway...

* What are the benefits of compiling natively?

* Much easier to get reliable download tallies!

???

* Distribute executable to end-users
  - Most users are not able to build anyway...
  - What are the benefits of compiling natively?
* Counting source code downloads is cumbersome
  - HJJ's method has been proven **not** to be scalable

--

## Daydreaming a bit

* Package manager

* Plugin capabilities

* Sandboxing

???

We should aim at creating a programming environment for quantum chemistry

* The package manager will handle dependencies
* Plugin capabilities means that the environment can
  be extended by the user, without ever knowing what's inside
  the box!
* Create local programming environments
* This is much like Cabal for Haskell and Virtual Environments for Python
* The Anaconda Python distribution has a package manager
* Every Linux distribution has such a thing!

---
name: last-page
template: inverse

## Thanks for your attention!

Slideshow created using [remark] and served using [cicero]

[remark]: https://github.com/gnab/remark
[cicero]: https://github.com/bast/cicero
