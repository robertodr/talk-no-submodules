name: inverse
layout: true
class: center, middle, inverse
---
#Managing submodules without git

.author[Roberto Di Remigio]

.date[11 February 2016, Skibotn]

.footnote[Slides available on [GitHub](https://github.com/robertodr/talk-no-submodules), [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/) licensed]
---
## Modular programming
---
layout: false
.left-column[
  ## What is it?
]
.right-column[
  Divide-and-conquer programming tasks.red[*]:

- Keep independent tasks uncoupled

- Components can be tested autonomously

- Provide standard interfaces across hosts

.footnote[.red[*] D. L. Parnas, [_Commun. ACM_, 1968, __11__, 341](http://dl.acm.org/citation.cfm?id=361623)]

  How?

- Divide codebase into small components

- Components __have to be__ (mostly) agnostic of each other

- __No assumptions__ about the host should be made

- Test on the largest number of platforms possible

- [Semantic versioning](http://semver.org/)

]

???

Standard interfaces: think of BLAS and LAPACK

Loose coupling between components is essential!

Loose coupling of the host on the guest is even more essential.

Language interoperability means that you should use C, at least at the interface level.

---
layout: false
.left-column[
  ## Testing
]
.right-column[
<img src="images/why_you_need_testing.jpg" align="right">
<p style="clear: both;">
]
---
layout: false
.left-column[
  ## Strategies.red[*]
.footnote[.red[*] Guess which one I am going to suggest.]
]
.right-column[
- Use the submodules mechanism provided by git
  * DALTON
  * LSDALTON
  * DIRAC

- Keep a static copy in the host code repository
  * ReSpect

- Distribute as library
  * Psi4
]

--

__Enforce conceptual separation by physical segregation__

- Keep host and guest code as far as possible

- Guest code minimally visible to host developers

<font color="red">
<center><b>Ignorance is bliss</b></center>
</font>

???

The second strategy is similar to the first one,
but avoids the use of submodules. Still we keep track of changes
of code that is essentially third-party.
Might be a good alternative it that third-party code is rock solid.
XCFUN is an example.

I want to be as ignorant of the guest internals as I am ignorant of BLAS/LAPACK internals

Guess which solution I am going to suggest?

---
layout: false
.left-column[
  ## Using git
]
.right-column[
* Keep a reference to a commit in the submodule repo
 ```
 [submodule "external/pcmsolver"]
 	path = external/pcmsolver
 	url = https://github.com/PCMSolver/pcmsolver.git
 ```

* Clone recursively to get all sources
  ```
  git clone --recursive git@gitlab.com:dalton/lsdalton.git
  ```

* Compile everything together
  - We use CMake
      * Need `ON/OFF` toggles...
      * ...and to tweak submodule dependencies
  - Doable with autotools, but painful

* Switch host branches
  ```
  git branch my_branch
  git submodule sync
  git submodule update --init --recursive
  ```
]

???

Clone recursively: this repo, its submodules, their submodules...
```
git clone --recursive git@gitlab.com:dalton/lsdalton.git
```

Different branches might point to different submodules remotes
```
git submodule sync
```

Different branches might point to different commits
```
git submodule update --init --recursive
 ```

---
layout: false
class: split-50
## Using git

.column[
<font color="red">
<center>Pros</center>
</font>
* Simple workflow for interface prototyping

* Transparent for end users

* Uniform compilation
]
.column[
<font color="red">
<center>Cons</center>
</font>
* Every developer has to be aware of submodules

* Transfer of dependencies

* Submodule testing?
]

### Usual responses

* _Deactivating submodule XYZ on my workstation until a fix is committed!_

* _F\*@#!!! It was working yesterday!_ &#9760; _F\*@#_ &#9760;.red[*]

* _At the end of the day, modularity is not that great..._

.footnote[.red[*]Emphasis mine]
???

---
## Using git
<img src="images/contented.jpg" style="float: left; width: 45%; margin-right: 1%; margin-bottom: 0.5em;">
<img src="images/love_you_too.jpg" style="float: left; width: 50%; margin-right: 1%; margin-bottom: 0.5em;">
<p style="clear: both;">

* It tangles host and guest code build up

* You still need to care, even if you would like not to

* Deactivating == not testing == failures down the road

* Semantic versioning __never__ enforced

???

Transfer of dependencies, quirky compilation workarounds

Switching branches requires now three (!) commands,
even if you don't use the submodules code

Most likely (and usually) failures happen when the release is imminent

---
layout: false
## Real world<sup>TM</sup> examples

### Cloning and branch switching

<div class="imageWrapper">
  <img class="overlayImage" src="images/clone_error.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/clone_error-lab.png" style="width: 80%" align="middle">
</div>
<p style="clear: both;">

---
layout: false
## Real world<sup>TM</sup> examples

### Accidental submodule reference updates

<div class="imageWrapper">
  <img class="overlayImage" src="images/compile_error1.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/compile_error2.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/compile_error3.png" style="width: 80%" align="middle">
</div>
<p style="clear: both;">

---
layout: false
## Real world<sup>TM</sup> examples

### "Asynchronous" host/guest updates

<div class="imageWrapper">
  <img class="overlayImage" src="images/link_error1.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error2.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error3.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error4.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error5.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error6.png" style="width: 80%" align="middle">
--
  <img class="overlayImage" src="images/link_error7.png" style="width: 80%" align="middle">
</div>
<p style="clear: both;">

???

"Asynchronous" means that the guest developers forgets to update the reference
to the submodule with the commit to the host code repository

---
layout: false
.left-column[
  ## Distribute library.red[*]
.footnote[.red[*] Pilfered from dr. Lori A. Burns, with permission!]
]
.right-column[
* Link against a library.

* Distribute the host executable and its redistributable dependencies.

### Wait, what? Who's compiling the submodule?

Host allows only three routes for add-ons:

1. detecting pre-built _dynamic_ add-on library and headers.
  Requires writing a `FindAddon.cmake` module.

2. build _dynamic_ add-on library on-demand.
  Requires writing a `ConfigAddon.cmake` module with an extensive `ExternalProject_Add` command.

3. build _static_ add-on library on-demand.
  Same as above, but final executable might not be redistributable.
<font color="red">
<center><b>Confusing?</b></center>
</font>
]

???

Linking is something we're already very good at doing,
either with CMake or autotools.
I don't know (and I don't care about autotools) so we'll assume
CMake throughout.

Needed to prototype all the CMake variable exchanges that the parent
and external project are going to have to make.

First an example, then we discuss pros and cons.

---
layout: false
## Real world<sup>TM</sup> example.red[*]
.footnote[.red[*] Files available from the [Psi4](https://github.com/psi4/psi4public) public repository]
```cmake
if(ENABLE_PCMSOLVER)
  include(ConfigPCMSolver)
endif()
```
```cmake
# User signal to try pre-built PCMSolver
if(PCMSOLVER_ROOT)
  find_package(PCMSolver)
endif()
# Build PCMSolver as external package if pre-built failed or not signaled
if(NOT PCMSolver_FOUND)
  # Configuration of on-demand build
  ExternalProject_Add(interface_pcmsolver
    PREFIX ${CUSTOM_PCMSolver_LOCATION}
    GIT_REPOSITORY https://github.com/PCMSolver/pcmsolver
    GIT_TAG master
    CMAKE_ARGS "${PCMSolverCMakeArgs}"
    INSTALL_DIR "${CUSTOM_PCMSolver_LOCATION}/install"
    )
  # Post-build operations
endif()
```

???

All of these files are publicly available on the Psi4 repo

---
layout: false
.left-column[
  ## Distribute library
]
.right-column[
* Final objective: distribute executable to end-users
  - Most users are not able to build anyway...

]

---
template: inverse

## Of course, Markdown can only go so far.
---
.left-column[
  ## Markdown extensions
]
.right-column[
To help out with slide layout and formatting, a few Markdown extensions have been included:

- Slide properties, for naming, styling and templating slides

- Content classes, for styling specific content

- Syntax highlighting, supporting a range of languages
]

---
.left-column[
  ## Markdown extensions
  ### - Slide properties
]
.right-column[
Initial lines containing key-value pairs are extracted as slide properties:

```remark
name: agenda
class: middle, center

# Agenda

The name of this slide is {{ name }}.
```

Slide properties serve multiple purposes:

* Naming and styling slides using properties `name` and `class`

* Using slides as templates using properties `template` and `layout`

* Expansion of `{{ property }}` expressions to property values

See the [complete list](https://github.com/gnab/remark/wiki/Markdown#slide-properties) of slide properties.
]
---
.left-column[
  ## Markdown extensions
  ### - Slide properties
  ### - Content classes
]
.right-column[
Any occurences of one or more dotted CSS class names followed by square brackets are replaced with the contents of the brackets with the specified classes applied:

```remark
.footnote[.red.bold[*] Important footnote]
```

Resulting HTML extract:

```xml
<span class="footnote">
  <span class="red bold">*</span> Important footnote
</span>
```
]
---
.left-column[
  ## Markdown extensions
  ### - Slide properties
  ### - Content classes
  ### - Syntax Highlighting
]
.right-column[
Code blocks can be syntax highlighted by specifying a language from the set of [supported languages](https://github.com/gnab/remark/wiki/Configuration#highlighting).

Using [GFM](http://github.github.com/github-flavored-markdown/) fenced code blocks you can easily specify highlighting language:

.pull-left[

<pre><code>```javascript
function add(a, b)
  return a + b
end
```</code></pre>
]
.pull-right[

<pre><code>```ruby
def add(a, b)
  a + b
end
```</code></pre>
]

A number of highlighting [styles](https://github.com/gnab/remark/wiki/Configuration#highlighting) are available, including several well-known themes from different editors and IDEs.

]
---
.left-column[
  ## Presenter mode
]
.right-column[
To help out with giving presentations, a presenter mode comprising the
following features is provided:

- Display of slide notes for the current slide, to help you remember
  key points

- Display of upcoming slide, to let you know what's coming

- Cloning of slideshow for viewing on extended display
]
---
.left-column[
  ## Presenter mode
  ### - Inline notes
]
.right-column[
Just like three dashes separate slides,
three question marks separate slide content from slide notes:

```
Slide 1 content

*???

Slide 1 notes

---

Slide 2 content

*???

Slide 2 notes
```

Slide notes are also treated as Markdown, and will be converted in the
same manner slide content is.

Pressing __P__ will toggle presenter mode.
]
???
Congratulations, you just toggled presenter mode!

Now press __P__ to toggle it back off.
---
.left-column[
  ## Presenter mode
  ### - Inline notes
  ### - Cloned view
]
.right-column[
Presenter mode of course makes no sense to the audience.

Creating a cloned view of your slideshow lets you:

- Move the cloned view to the extended display visible to the audience

- Put the original slideshow in presenter mode

- Navigate as usual, and the cloned view will automatically keep up with the original

Pressing __C__ will open a cloned view of the current slideshow in a new
browser window.
]
---
template: inverse

## It's time to get started!
---
.left-column[
  ## Getting started
]
.right-column[
Getting up and running is done in only a few steps:

1. Visit the [project site](http://github.com/gnab/remark)

2. Follow the steps in the Getting Started section

For more information on using remark, please check out the [wiki](https://github.com/gnab/remark/wiki) pages.
]
---
class: left

##  How About Some Gnarly Equations?

I'm glad you asked.  With a link to the MathJax Javascript library, you can
write inline equations  `\(E=mc^2\)`, or full-line equations like:

`$$\Gamma(t)=  \pi \, \Im\left\{ \mathbf{x}_+^H(t) \, \frac{\mathrm{d}}{\mathrm{d} t}\mathbf{x}_+(t)\right\}$$`

You can just write in LaTeX, with minor modifications for specifying in-line or
full-line equations.  Also, in Remark, the equations are surrounded by
backquotes, as you see in the source.


[{MathJax}](https://www.mathjax.org/) lets you write your equations in other ways; see the documentation for details.


Note that writing equations in MathJax impacts the portability of your talk.
Currently, this template links to a local copy of Remark, but a remote (online)
copy of MathJax.  If you want the equations to work when you are offline, you
need to copy the entire MathJax project, about 150 Mb.  See the comments at the
bottom of this file.
---
name: last-page
template: inverse

## That's all folks (for now)!

Slideshow created using [remark] and served using [cicero]

[remark]: https://github.com/gnab/remark
[cicero]: https://github.com/bast/cicero
